Assignment-2 B2
19th April 2013
Team Members:   Shrikrishna Holla 1pi10is100
		Ashish Shetty     1pi10is132

Contribution:
-> Handling timeout and broadcast time intervals ,i.e. the time after which the Distance Vector needs to be sent to it's neighbours by using datetime module's now() function and determine whether the given time has reached. The timer will be reset when the time interval is reached. A link is assumed to be down when the timeout happens after 30s.
-> Stabilization of the network when there is no difference in the updated DV and the current DV or if there is a timeout, the stablilizer will update its DV an advertise the same to its neighbour after removing the neighbour from the neighbour list. 

Observation and Understanding:

Initial Graph:-

	-------- |node 1|--------
	|			|
	12			3
	|			|
    |node 2|--------7-------|node 3|

Graph after breaking link between node 3 and node 2

        -------- |node 1|--------
        |                       |
        12                      3
        |                       |
    |node 2|		     |node 3|

At node 1:
vinod@vinod:~/Documents/Computer Networks/CN_Assignments/Computer-Networks-2/Assignment-2$ python b2.py -i 1 -t 3 -e 2:12,3:3
DV at 2013-04-20 01:16:02.829942 : {2: (10, 3), 3: (3, 3)}
DV at 2013-04-20 01:16:33.829955 : {2: (10, 3), 3: (3, 3)}
DV at 2013-04-20 01:17:04.829960 : {2: (10, 3), 3: (3, 3)}
DV at 2013-04-20 01:17:52.359874 : {2: (12, 2), 3: (3, 3)}
DV at 2013-04-20 01:18:23.359894 : {2: (12, 2), 3: (3, 3)}
DV at 2013-04-20 01:18:54.359913 : {2: (12, 2), 3: (3, 3)}
DV at 2013-04-20 01:19:25.359890 : {2: (12, 2), 3: (3, 3)}
^CExiting by breaking all links...
vinod@vinod:~/Documents/Computer Networks/CN_Assignments/Computer-Networks-2/Assignment-2$ 

At node 2:
vinod@vinod:~/Documents/Computer Networks/CN_Assignments/Computer-Networks-2/Assignment-2$ python b2.py -i 2 -t 3 -e 1:12,3:7
DV at 2013-04-20 01:16:02.830073 : {1: (10, 3), 3: (7, 3)}
DV at 2013-04-20 01:16:33.830077 : {1: (10, 3), 3: (7, 3)}
DV at 2013-04-20 01:17:04.830081 : {1: (10, 3), 3: (7, 3)}
DV at 2013-04-20 01:17:35.830078 : {1: (10, 3), 3: (7, 3)}
DV at 2013-04-20 01:18:06.830168 : {1: (12, 1), 3: (64,)}
DV at 2013-04-20 01:18:40.362962 : {1: (12, 1), 3: (15, 1)}
DV at 2013-04-20 01:19:11.362970 : {1: (12, 1), 3: (15, 1)}
^CExiting by breaking all links...
vinod@vinod:~/Documents/Computer Networks/CN_Assignments/Computer-Networks-2/Assignment-2$ 

At node 3:
vinod@vinod:~/Documents/Computer Networks/CN_Assignments/Computer-Networks-2/Assignment-2$ python b2.py -i 3 -t 3 -e 2:7,1:3
DV at 2013-04-20 01:16:02.829872 : {1: (3, 1), 2: (7, 2)}
DV at 2013-04-20 01:16:33.829859 : {1: (3, 1), 2: (7, 2)}
DV at 2013-04-20 01:17:04.829884 : {1: (3, 1), 2: (7, 2)}
2
DV at 2013-04-20 01:17:52.360046 : {1: (3, 1), 2: (15, 1)}
DV at 2013-04-20 01:18:23.360068 : {1: (3, 1), 2: (15, 1)}
DV at 2013-04-20 01:18:54.360085 : {1: (3, 1), 2: (15, 1)}
^CExiting by breaking all links...
vinod@vinod:~/Documents/Computer Networks/CN_Assignments/Computer-Networks-2/Assignment-2$ 

The initial distance vectors will be :
At node 1 : node 2 at a cost of 12
	    node 3 at a cost of 3
At node 2 : node 1 at a cost of 12
            node 3 at a cost of 7
At node 3 : node 2 at a cost of 7
            node 1 at a cost of 3

Once the Distance Vectors are advertised to it's neighbours, we wont find any change at node 3 because it has least possible path for each node, but at node 1, the DV of node 3  will be received and it updates its routing table to node 2 via node 3 at a cost of 10 (3+7<12 by DV algorithm), and it advertises the same to its neighbours. Similarly , node 2 will also update its table to node 1 via node 3 at a cost of 10 after receiving the DV of node 3 and advertises the newly updated DV. The network stablizes after we see no changes at DV of each node.
At node 3 , we are breaking the link to node 2 (which had a cost of 7), now the poison reverse will be initiated by node 3 as its the first node which is aware of the link down status of the link between node 2 and 3(the value of cost is set to 64 to depict link down). Node 3 advertises to node 1 that least cost path to node 2 is 64(but its not) , then node 1 updates it DV to node 2 at a cost of 12 (it was node 2 via node 3 at a cost of 10). Now This update is advertises to both node 2 and node 3 (overriding split horizon) and so node 2 updates its DV to node 3 via node 1 at a cost of 15(from node 3 at a cost 7).And node 3 updates its DV to node 2 via node 1 at a cost of 15(from node 2 at a cost of 7). And finally the network stabilizes.

Final Routing Tables:
At node 1:
	To	Next Hop     Cost
      node 2       -	      12
      node 3 	   -           3

At node 2:
        To      Next Hop     Cost
      node 1       -          12
      node 3     node 1       15

At node 3:
        To      Next Hop     Cost
      node 2     node 1       15
      node 1       -           3
